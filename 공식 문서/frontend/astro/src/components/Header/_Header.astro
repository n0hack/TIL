---
import NavItem from '../NavItem.astro';
import navList from '../navLiost';
import { twMerge } from 'tailwind-merge';

type Props = {
  transition?: boolean;
};

const { transition } = Astro.props;
---

<header
  class={twMerge(
    'fixed inset-0 z-10 h-[64px] w-full transition duration-300',
    !transition && 'border-b text-gray-900 bg-white',
    transition && 'bg-transparent text-white',
  )}
>
  <div
    class="mx-auto flex h-full max-w-[1024px] items-center justify-between pl-6 pr-[14px] desktop:pl-[40px] desktop:[pr-30px]"
  >
    <div class="flex items-center gap-[60px]">
      <a href="/" class="py-2">
        Logo
        {/* <Logo class="w-144pxr duration-100" /> */}
      </a>
      <nav class="">
        <ul class="flex gap-6">
          {navList.map(({ name, path }) => <NavItem name={name} path={path} />)}
        </ul>
      </nav>
    </div>
    <div class="h-full">
      <ul class="relative flex h-full items-center">
        {
          /* <SearchButton />
            <MenuButton /> */
        }
      </ul>
    </div>
  </div>
</header>

<script define:vars={{ transition }}>
  if (!transition) return;

  /** @type {HTMLHeadElement} */
  const header = document.querySelector('header');

  function handleScroll() {
    const filled = !transition || (transition && window.scrollY > 64);

    if (filled) {
      header.classList.add(
        'border-b',
        'border-gray-200',
        'bg-white',
        'text-gray-900',
      );
      header.classList.remove('bg-transparent', 'text-white');
    } else {
      header.classList.remove(
        'border-b',
        'border-gray-200',
        'bg-white',
        'text-gray-900',
      );
      header.classList.add('bg-transparent', 'text-white');
    }
  }

  window.addEventListener('scroll', handleScroll);
</script>
